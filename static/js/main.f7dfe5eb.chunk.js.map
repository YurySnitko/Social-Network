{"version":3,"sources":["components/common/Paginator/Paginator.module.css","components/Profile/Myposts/MyPosts.module.css","redux/dialogsReducer.ts","api/chatApi.ts","redux/chatReducer.ts","components/Users/Users.module.css","components/Profile/Myposts/Post/Post.module.css","components/common/FormsControl/FormsControl.tsx","api/api.ts","reportWebVitals.js","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","assets/images/preloaderSpin.svg","components/common/Preloader/Preloader.tsx","redux/usersSelectors.ts","components/common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","api/usersApi.ts","utils/objectHelpers.ts","redux/usersReducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","api/securityApi.ts","api/authApi.ts","redux/authReducer.ts","redux/appReducer.ts","hoc/withSuspense.tsx","api/profileApi.ts","redux/profileReducer.ts","redux/sidebarReducer.ts","redux/reduxStore.ts","components/Login/Login.tsx","redux/authSelectors.ts","components/Header/Header.tsx","components/Profile/Myposts/AddPostForm.tsx","components/Profile/Myposts/Post/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","redux/profileSelectors.ts","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","App.tsx","index.tsx","components/common/FormsControl/FormsControl.module.css","utils/validators/validator.ts","components/Profile/ProfileInfo/ProfileInfo.module.css"],"names":["module","exports","initialState","dialogs","id","name","messages","message","actions","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","console","log","cleanup","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","filter","send","payload","_newMessageHandler","newMessagesHandlerCreator","dispatch","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","a","stopMessagesListening","chatReducer","map","m","v1","i","arr","length","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","ResultCodeEnum","ResultCodeForCaptchaEnum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","News","Music","Settings","Preloader","style","backgroundColor","src","preloader","alt","receiveUsers","usersPage","users","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","pages","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","paginator","onClick","p","selectedPage","pageNumber","User","user","unfollow","follow","to","photos","small","userPhoto","followed","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","term","friend","String","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","get","res","post","delete","updateObjectInArray","items","itemId","objPropName","newObjProps","u","userId","count","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","usersReducer","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","pathname","unfollowD","bind","followD","UsersPage","pageTitle","securityAPI","authAPI","email","password","rememberMe","captcha","response","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","withSuspense","WrappedComponent","Suspense","fallback","profileAPI","put","photoFile","formData","FormData","append","profile","posts","likesCount","addPostActionCreator","newPostBody","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserProfile","profileReducer","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","auth","form","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","LoginReduxForm","reduxForm","handleSubmit","required","undefined","formSummaryError","LoginPage","loginData","CaptchaIsRequired","stopSubmit","_error","selectIsAuth","selectLogin","selectAuthorisedUserId","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","icon","UserOutlined","maxLength100","maxLengthCreator","Post","item","MyPosts","postsElements","reverse","postsBlock","addPost","newPostText","MyPostsMemorized","MyPostsContainer","connect","ProfileStatusWithHooks","editMode","setEditMode","onDoubleClick","onChange","currentTarget","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","Object","keys","contacts","key","selectProfile","selectStatus","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","authorisedUserId","useParams","refreshProfile","userUrlId","getStatus","profileInfo","descriptionBlock","large","mainPhoto","file","target","files","profileData","getState","Error","Promise","reject","Profile","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ChatPage","SuspendedDialogs","SuspendedChatPage","App","this","initializeApp","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","textAlign","Component","AppContainer","withRouter","promise","all","SamuraiJSApp","ReactDOM","document","getElementById","maxLength"],"mappings":"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","file":"static/js/main.f7dfe5eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3SIki\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3_6PC\",\"posts\":\"MyPosts_posts__1hEKQ\"};","import { InferActionsTypes } from \"./reduxStore\";\n\ntype DialogType = {\n    id: number\n    name: string\n}\ntype MessageType = {\n    id: number\n    message: string\n}\n\nlet initialState = {\n    dialogs: [\n        { id: 1, name: 'Dima' },\n        { id: 2, name: 'Sasha' },\n        { id: 3, name: 'Margo' },\n        { id: 4, name: 'Dan' },\n        { id: 5, name: 'Max' },\n    ] as Array<DialogType>,\n    messages: [\n        { id: 1, message: 'Hi' },\n        { id: 2, message: 'How are you' },\n        { id: 3, message: 'Yo' },\n        { id: 4, message: 'Yo' },\n        { id: 5, message: 'Yo' },\n    ] as Array<MessageType>,\n};\n\nexport const actions = {\n    sendMessage: (newMessageBody: string) => ({ type: 'SN/DIALOGS/SEND-MESSAGE', newMessageBody } as const)\n}\n\nconst dialogsReducer = (state = initialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case 'SN/DIALOGS/SEND-MESSAGE':\n            let body = action.newMessageBody;\n            return {\n                ...state,\n                messages: [...state.messages, {id: 6, message: body}]\n            };\n        default:\n            return state;\n    }\n}\n\nexport default dialogsReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>","const subscribers = {\n    'messages-received': [] as MessagesReceivedSubscriberType[],\n    'status-changed': [] as StatusChangedSubscriberType[]\n} \n\nlet ws: WebSocket | null = null\n\nconst closeHandler = () => {\n    notifySubscribersAboutStatus('pending')\n    setTimeout(createChannel, 3000)\n}\nconst messageHandler = (e: MessageEvent) => {\n    const newMessages = JSON.parse(e.data)\n    subscribers['messages-received'].forEach(s => s(newMessages))\n}\nconst openHandler = () => {\n    notifySubscribersAboutStatus('ready')\n}\nconst errorHandler = () => {\n    notifySubscribersAboutStatus('error')\n    console.log('restart page')\n}\nconst cleanup = () => {\n    ws?.removeEventListener('close', closeHandler)\n    ws?.removeEventListener('message', messageHandler)\n    ws?.removeEventListener('open', openHandler)\n    ws?.removeEventListener('error', errorHandler)\n}\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n    subscribers['status-changed'].forEach(s => s(status))\n}\n\nfunction createChannel() {\n    cleanup()\n    ws?.close()\n    notifySubscribersAboutStatus('pending')\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n    ws.addEventListener('close', closeHandler)\n    ws.addEventListener('message', messageHandler)\n    ws.addEventListener('open', openHandler)\n    ws.addEventListener('error', errorHandler)\n}\n\n\nexport const chatAPI = {\n    start() {\n        createChannel()\n    },\n    stop() {\n        subscribers['messages-received'] = []\n        subscribers['status-changed'] = []\n        cleanup()\n        ws?.close()\n    },\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        //@ts-ignore\n        subscribers[eventName].push(callback)\n        return () => {\n            //@ts-ignore\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\n        }\n    },\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        //@ts-ignore\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\n    },\n    sendMessage(message: string) {\n        ws?.send(message)\n    }\n}\n\ntype EventsNamesType = 'messages-received' | 'status-changed' \nexport type ChatMessageAPIType = {\n    message: string\n    photo: string\n    userId: number\n    userName: string\n}\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\ntype StatusChangedSubscriberType = (status: StatusType) => void\nexport type StatusType = 'pending' | 'ready' | 'error'\n","import { FormAction} from 'redux-form';\nimport { BaseThunkType, InferActionsTypes } from './reduxStore';\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../api/chatApi';\nimport { Dispatch } from 'redux';\nimport {v1} from 'uuid'\n\nlet initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'pending' as StatusType,\n};\n\nconst chatReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'social-network/chat/MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1()}))].filter((m, i, arr) => i >= arr.length - 100),\n            }\n        case 'social-network/chat/STATUS_CHANGED':\n            return {\n                ...state,\n                status: action.payload.status,\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => (\n        { type: 'social-network/chat/MESSAGES_RECEIVED', payload: { messages } } as const),\n    statusChanged: (status: StatusType) => (\n        { type: 'social-network/chat/STATUS_CHANGED', payload: { status } } as const),\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessagesHandlerCreator = (dispatch: Dispatch) => {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            dispatch(actions.messagesReceived(messages))\n        }\n    }\n    return _newMessageHandler\n}\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            dispatch(actions.statusChanged(status))\n        }\n    }\n    return _statusChangedHandler\n}\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.start()\n    chatAPI.subscribe('messages-received', newMessagesHandlerCreator(dispatch))\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n}\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.unsubscribe('messages-received', newMessagesHandlerCreator(dispatch))\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n    chatAPI.stop()\n}\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\n    chatAPI.sendMessage(message)\n}\n\nexport default chatReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\ntype ChatMessageType = ChatMessageAPIType & {id: string}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__17MJB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__LYZ_H\"};","import React from 'react';\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\nimport { FieldValidatorType } from '../../../utils/validators/validator';\nimport styles from './FormsControl.module.css';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined, \n                            name: FormKeysType, \n                            validators: Array<FieldValidatorType>, \n                            component: React.FC<WrappedFieldProps> , props = {}, text = '') {\n    return <div>\n        <Field placeholder={placeholder} name={name} validate={validators} component={component}\n            {...props} /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>","import { UserType } from './../types/types';\nimport axios from 'axios';\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": '556cee82-8802-4677-8820-f69af84e115c',\n    }\n})\n\nexport enum ResultCodeEnum {\n    Success = 0,\n    Error = 1,\n}\nexport enum ResultCodeForCaptchaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\nexport type ResponseType<D = {}, RC = ResultCodeEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport s from './News.module.css';\n\nconst News = (props) => {\n    return (\n        <div>\n            News\n        </div>\n    )\n}\n\nexport default News;","import React from 'react';\nimport s from './Music.module.css';\n\nconst Music = (props) => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","import React from 'react';\n\nconst Settings = (props) => {\n    return (\n        <div>\n            Settings\n        </div>\n    )\n}\n\nexport default Settings;","export default __webpack_public_path__ + \"static/media/preloaderSpin.f5df7e52.svg\";","import React from 'react';\nimport preloader from '../../../assets/images/preloaderSpin.svg';\n\nlet Preloader: React.FC = () => {\n    return <div style={{backgroundColor: \"white\"}}>\n        <img src={preloader} alt='preload' />\n    </div>\n}\n\nexport default Preloader;","import { AppStateType } from \"./reduxStore\";\n\nexport const receiveUsers = (state: AppStateType) => {\n    return state.usersPage.users;\n}\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress;\n}\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter;\n}","import React, { useState } from 'react';\nimport styles from './Paginator.module.css';\nimport cn from 'classnames';\n\ntype PropsType = {\n    totalUsersCount: number\n    pageSize: number\n    onPageChanged: (pageNumber: number) => void\n    currentPage: number\n    portionSize?: number\n}\n\nconst Paginator: React.FC<PropsType> = ({totalUsersCount, pageSize, onPageChanged, currentPage, portionSize = 10}) => {\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n    \n    return <div className={cn(styles.paginator)}> \n        {portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\n\n            {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map((p) => {\n                return <span className={cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber)}\n                    onClick={() => { onPageChanged(p) }} key={p}>{p}</span>\n            })}\n            \n            {portionCount > portionNumber &&\n                <button onClick={() => {setPortionNumber(portionNumber + 1)}}>NEXT</button>}\n        </div>\n}\n\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/user.81251c2b.png\";","import React from 'react';\nimport styles from './Users.module.css';\nimport userPhoto from '../../assets/images/user.png';\nimport { NavLink } from 'react-router-dom';\nimport { UserType } from '../../types/types';\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n    return <div>\n        <span>\n            <div>\n                <NavLink to={'/profile/' + user.id}>\n                    <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto} alt={'UserPhoto'} />\n                </NavLink>\n            </div>\n            <div>\n                {user.followed\n                    ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\n                        unfollow(user.id);\n                    }}>Unfollow</button>\n                    : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\n                        follow(user.id);\n                    }}>Follow</button>}\n            </div>\n        </span>\n        <span>\n            <span>\n                <div>{user.name}</div>\n                <div>{user.status}</div>\n            </span>\n            <span>\n                <div>{\"user.location.country\"}</div>\n                <div>{\"user.location.city\"}</div>\n            </span>\n        </span>\n    </div>\n}\n\nexport default User;","import React from 'react';\nimport { Field, Form, Formik } from 'formik';\nimport { FilterType } from '../../redux/usersReducer';\nimport { useSelector } from 'react-redux';\nimport { getUsersFilter } from '../../redux/usersSelectors';\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {};\n    return errors;\n}\ntype FriendFormType = \"true\" | \"false\" | \"null\"\ntype FormType = {\n    term: string\n    friend: FriendFormType\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nconst UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const filter = useSelector(getUsersFilter)\n    \n    const submit = (values: FormType, {setSubmitting}: {setSubmitting: (isSubmitting: boolean) => void}) => {\n        debugger\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\n        }\n        \n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            enableReinitialize\n            initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({ isSubmitting }) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\" />\n                    <Field name='friend' as='select'>\n                        <option value='null'>All</option>\n                        <option value='true'>Only followed</option>\n                        <option value='false'>only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})\n\nexport default UsersSearchForm;","import { instance, GetItemsType, ResponseType } from './api';\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 5, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+ (friend === null ? '' : `$friend=${friend}`))\n            .then(res => res.data)\n    },\n    follow(id: number) {\n        return instance.post<ResponseType>(`follow/${id}`,).then(res => res.data)\n    },\n    unfollow(id: number) {\n        return instance.delete(`follow/${id}`,).then(res => res.data) as Promise<ResponseType>\n    },\n}\n\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return items.map((u: any) => {\n        if (u[objPropName] === itemId) {\n            return { ...u, ...newObjProps}\n        };\n        return u;\n    });\n}","import { ResponseType } from './../api/api';\nimport { usersAPI } from './../api/usersApi';\nimport { BaseThunkType, InferActionsTypes } from './reduxStore';\nimport { updateObjectInArray } from '../utils/objectHelpers';\nimport { UserType } from '../types/types';\nimport { Dispatch } from 'redux';\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [] as Array<number>, //array of users id\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n};\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true}),\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false}),\n            }\n        case 'SN/USERS/SET_USERS':\n            return { ...state, users: [...action.users] }\n        case 'SN/USERS/SET_CURRENT_PAGE':\n            return { ...state, currentPage: action.currentPage }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\n            return { ...state, totalUsersCount: action.count }\n        case 'SN/USERS/TOGGLE_IS_FETCHING':\n            return { ...state, isFetching: action.isFetching }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        case 'SN/USERS/SET_FILTER':\n            return {...state, filter: action.payload}\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({ type: 'SN/USERS/FOLLOW', userId } as const),\n    unfollowSuccess: (userId: number) => ({ type: 'SN/USERS/UNFOLLOW', userId } as const),\n    setUsers: (users: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS', users } as const),\n    setCurrentPage: (currentPage: number) => ({ type: 'SN/USERS/SET_CURRENT_PAGE', currentPage } as const),\n    setFilter: (filter: FilterType) => ({ type: 'SN/USERS/SET_FILTER', payload: filter } as const),\n    setTotalUsersCount: (count: number) => ({ type: 'SN/USERS/SET_TOTAL_USERS_COUNT', count } as const), \n    toggleIsFetching: (isFetching: boolean) => ({ type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({ type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId } as const),\n}\n\nexport const getUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch) => {\n        dispatch(actions.toggleIsFetching(true));\n        dispatch(actions.setCurrentPage(page));\n        dispatch(actions.setFilter(filter));\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\n        dispatch(actions.toggleIsFetching(false));\n        dispatch(actions.setUsers(data.items));\n        dispatch(actions.setTotalUsersCount(data.totalCount));\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, \n                                    userId: number, \n                                    apiMethod: (userId: number) => Promise<ResponseType>, \n                                    actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, userId));\n\n    let response = await apiMethod(userId);\n    \n    if (response.resultCode === 0) {\n        dispatch(actionCreator(userId));\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId));\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\n    }\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\n    }\n}\n\nexport default usersReducer;\n\nexport type InitialStateType = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ThunkType = BaseThunkType<ActionsTypes>\ntype ActionsTypes = InferActionsTypes<typeof actions>","import React from 'react';\nimport Paginator from '../common/Paginator/Paginator';\nimport User from './User';\nimport UsersSearchForm from './UsersSearchForm';\nimport { FilterType, getUsers, follow, unfollow } from '../../redux/usersReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrentPage, getFollowingInProgress, getPageSize, getTotalUsersCount, getUsersFilter, receiveUsers } from '../../redux/usersSelectors';\nimport { useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport * as queryString from 'query-string';\n\ntype QueryParamsType = {term?: string; page?: string; friend?: string}\n\nexport const Users: React.FC = () => {\n    \n    const users = useSelector(receiveUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n        switch(parsed.friend) {\n            case 'null':\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case 'true':\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case 'false':\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(getUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/developers',\n            search: queryString.stringify(query) //`?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\n        })\n    }, [filter, currentPage])\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(getUsers(pageNumber, pageSize, filter));\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(getUsers(1, pageSize, filter))\n    }\n    const unfollowD = (userId: number) => {\n        dispatch(unfollow(userId))\n    }\n    const followD = (userId: number) => {\n        dispatch(follow(userId))\n    }\n    \n    return <div>\n        <UsersSearchForm onFilterChanged={onFilterChanged} />\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n            totalUsersCount={totalUsersCount} pageSize={pageSize} />\n        <div>\n            {users.map((u) => <User user={u} \n                key={u.id} \n                followingInProgress={followingInProgress}\n                follow={followD} \n                unfollow={unfollowD} />\n            )}\n        </div>\n    </div>\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Preloader from '../common/Preloader/Preloader';\nimport {  getIsFetching} from '../../redux/usersSelectors';\nimport { Users } from './Users';\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\n    const isFetching = useSelector(getIsFetching)\n    \n    return <>\n            <h2>{props.pageTitle}</h2>\n            {isFetching ? <Preloader /> : null}\n            <Users />\n        </>\n}\n","import { instance } from './api';\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\n            //.then(response => response.data);\n    },\n}\n\n","import { instance, ResponseType, ResultCodeEnum, ResultCodeForCaptchaEnum } from './api';\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<ResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\n            //.then(response => response.data);\n    },\n    login(email: string, password: string, rememberMe = false, captcha: string | null = null) {\n        return instance.post<ResponseType<LoginResponseDataType, ResultCodeForCaptchaEnum | ResultCodeEnum>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(response => response.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n            //.then(response => response.data);\n    },\n}\n\n","import { securityAPI } from './../api/securityApi';\nimport { authAPI } from './../api/authApi';\nimport { FormAction, stopSubmit } from 'redux-form';\nimport { ResultCodeEnum, ResultCodeForCaptchaEnum } from '../api/api';\nimport { BaseThunkType, InferActionsTypes } from './reduxStore';\n\nlet initialState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null,\n};\n\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'social-network/auth/SET_USER_DATA':\n        case 'social-network/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, \n                                    login: string | null, isAuth: boolean) => (\n        { type: 'social-network/auth/SET_USER_DATA', payload: { userId, email, login, isAuth } } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => (\n        { type: 'social-network/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me();\n\n    if (meData.resultCode === ResultCodeEnum.Success) {\n        let { id, email, login } = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => {\n    return async (dispatch) => {\n        let loginData = await authAPI.login(email, password, rememberMe, captcha);\n        if (loginData.resultCode === ResultCodeEnum.Success) {\n            dispatch(getAuthUserData());\n        } else {\n            if (loginData.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\n                dispatch(getCaptchaUrl());\n            }\n\n            let message = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error';\n            dispatch(stopSubmit('login', { _error: message }));\n        }\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n        const data = await securityAPI.getCaptchaUrl();\n        const captchaUrl = data.url;\n        dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\n}\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    let response = await authAPI.logout();\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false));\n    }\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>","import { InferActionsTypes } from './reduxStore';\nimport { getAuthUserData } from './authReducer';\n\nlet initialState = {\n    initialized: false,\n};\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SN/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true,\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({ type: 'SN/APP/INITIALIZED_SUCCESS' } as const)\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.initializedSuccess());\n        })\n}\n\nexport default appReducer;","import React from 'react';\nimport Preloader from '../components/common/Preloader/Preloader';\n\nexport function withSuspense<WCP> (WrappedComponent: React.ComponentType<WCP>) {\n    return (props: WCP) => {\n        return <React.Suspense fallback={<Preloader />}>\n            <WrappedComponent {...props} />\n        </React.Suspense>\n    };\n}","import { ProfileType, PhotosType } from './../types/types';\nimport { instance, ResponseType } from './api';\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number | null) {\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<ResponseType>(`profile/status/`, {status: status}).then(res => res.data)\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile)\n\n        return instance.put<ResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data)\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<ResponseType>(`profile`, profile).then(res => res.data)\n    },\n}\n","import { profileAPI } from './../api/profileApi';\nimport { BaseThunkType, InferActionsTypes } from './reduxStore';\nimport { stopSubmit, FormAction } from 'redux-form';\nimport { PostsType, PhotosType, ProfileType } from '../types/types';\n\nlet initialState = {\n    posts: [\n        { id: 1, message: 'Hi, how are you?', likesCount: 10 },\n        { id: 2, message: \"it's my first post\", likesCount: 5 },\n        { id: 3, message: \"Heeeeey\", likesCount: 15 },\n    ] as Array<PostsType>,\n    profile: null as ProfileType | null,\n    status: '',\n};\nexport type InitialStateType = typeof initialState \ntype ActionsTypes = InferActionsTypes<typeof actions>\n\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SN/PROFILE/ADD-POST':\n            return {\n                ...state,\n                posts: [...state.posts, { id: 5, message: action.newPostBody, likesCount: 0 }],  \n            };\n        case 'SN/PROFILE/SET_USER_PROFILE':\n            return {\n                ...state,\n                profile: action.profile,\n            }\n            case 'SN/PROFILE/SET_STATUS':\n            return {\n                ...state,\n                status: action.status,\n            }\n            case 'SN/PROFILE/DELETE_POST':\n            return {\n                ...state,\n                posts: state.posts.filter(p => p.id !== action.postId)\n            }\n            case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {\n                ...state,\n                profile: {...state.profile, photos: action.photos} as ProfileType\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    addPostActionCreator: (newPostBody: string) => ({ type: 'SN/PROFILE/ADD-POST', newPostBody } as const),\n    setUserProfile: (profile: ProfileType) => ({ type: 'SN/PROFILE/SET_USER_PROFILE', profile } as const),\n    setStatus: (status: string) => ({ type: 'SN/PROFILE/SET_STATUS', status } as const),\n    deletePost: (postId: number) => ({ type: 'SN/PROFILE/DELETE_POST', postId } as const),\n    savePhotoSuccess: (photos: PhotosType) => ({ type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos } as const),\n}\n\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getProfile(userId);\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId);\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    let data = await profileAPI.updateStatus(status);\n    if (data.resultCode === 0) {\n        dispatch(actions.setStatus(status))\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file);\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profileData: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId;\n    const data = await profileAPI.saveProfile(profileData);\n\n    if (data.resultCode === 0) {\n        if (userId !== null) {\n            dispatch(getUserProfile(userId))\n        } else {\n            throw new Error(\"userId can't be null\")\n        }\n    } else {\n            let message = data.messages.length > 0 ? data.messages[0] : 'Some error';\n            //dispatch(stopSubmit('edit-profile', { _error: message}));\n            dispatch(stopSubmit('edit-profile', { \"contacts\": {\"facebook\": message}}));\n            return Promise.reject(message);\n        }\n}\n\nexport default profileReducer;","type SidebarItemType = {\n    id: number\n    name: string\n}\n\nlet initialState = [\n    {id: 1, name: \"Dima\"},\n    {id: 2, name: 'Margo'},\n    {id: 3, name: \"Andrew\"},\n] as Array<SidebarItemType>;\n\ntype InitialStateType = typeof initialState;\n\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\n    return state;\n}\n\nexport default sidebarReducer;","import { Action, applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport authReducer from \"./authReducer\";\nimport dialogsReducer from \"./dialogsReducer\";\nimport profileReducer from \"./profileReducer\";\nimport sidebarReducer from \"./sidebarReducer\";\nimport usersReducer from \"./usersReducer\";\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\nimport {reducer as formReducer} from 'redux-form';\nimport appReducer from \"./appReducer\";\nimport chatReducer from \"./chatReducer\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n    chat: chatReducer,\n});\n\ntype RootReducerType = typeof rootReducer;\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never\n\nexport  type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\n// @ts-ignore\nwindow.__store__ = store\n\nexport default store","import React from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { createField, Input } from '../common/FormsControl/FormsControl';\nimport { required } from '../../utils/validators/validator';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../../redux/authReducer';\nimport { Redirect } from 'react-router';\nimport  styles  from '../common/FormsControl/FormsControl.module.css';\nimport { AppStateType } from '../../redux/reduxStore';\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\n\n            {captchaUrl && <img src={captchaUrl} alt='captcha' />}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Anti-bot symbols', 'captcha', [required], Input)}\n            \n            {error && <div className={styles.formSummaryError}>{error}</div>}\n            <div>\n                <button>Sign Up</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\ntype LoginFormValuesTypeKeys = keyof LoginFormValuesType\n\nexport const LoginPage: React.FC = () => {\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch = useDispatch() \n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'} />\n    }\n\n    return <div>\n        <h1>LOGIN</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n    </div>\n}","import { AppStateType } from \"./reduxStore\";\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth;\n}\nexport const selectLogin = (state: AppStateType) => {\n    return state.auth.login;\n}\nexport const selectAuthorisedUserId = (state: AppStateType) => {\n    return state.auth.userId;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Col, Menu, Row, Layout, Button } from 'antd';\nimport Avatar from 'antd/lib/avatar/avatar';\nimport { UserOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsAuth, selectLogin } from '../../redux/authSelectors';\nimport { logout } from '../../redux/authReducer';\n\nexport type MapPropsType = {}\n\nexport const Header: React.FC<MapPropsType> = (props) => {\n    const isAuth = useSelector(selectIsAuth)\n    const login = useSelector(selectLogin)\n\n    const dispatch = useDispatch()\n    \n    const logoutCallBack = () => {\n        dispatch(logout())\n    }\n    \n    const { Header } = Layout;\n\n    return (\n        <Header className=\"header\">\n      <Row>\n        <Col span={18}>\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n            <Menu.Item key=\"1\"><Link to='/developers'>Developers</Link></Menu.Item>\n          </Menu>    \n        </Col>\n        {isAuth \n            ? <> <Col span={1}>\n                    <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\n                </Col>\n                <Col span={5}>\n                    <Button onClick={logoutCallBack}>Log out</Button> \n                </Col>\n            </>\n            : <Col span={6}> \n                <Button>\n                    <Link to={'/login'}>Login</Link>\n                </Button>\n            </Col>}\n      </Row>\n    </Header>\n    )\n}\n","import React from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { required, maxLengthCreator } from '../../../utils/validators/validator';\nimport { createField, GetStringKeys, Textarea } from '../../common/FormsControl/FormsControl';\n\nconst maxLength100 = maxLengthCreator(100);\n\ntype PropsType = {\n}\nexport type AddPostFormValuesType = {\n  newPostText: string\n}\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\n\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n      {createField<AddPostFormValuesTypeKeys>('Post Message', 'newPostText', [required, maxLength100], Textarea)}\n      </div>\n      <div>\n        <button>Add post</button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm<AddPostFormValuesType>({ form: 'ProfileAddNewPostForm' })(AddNewPostForm);\n","import React from 'react';\nimport s from './Post.module.css';\n\ntype PropsType = {\n  message: string\n  likesCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={s.item}>\n      <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRNplTWk2suGea3AcNZ-nzKJVrLX9mL0SGOmA&usqp=CAU' alt='phot'/>\n      {props.message}\n      <div>\n        <span>like</span> {props.likesCount}\n      </div>\n    </div>\n\n  )\n}\n\nexport default Post;","import React from 'react';\nimport { PostsType } from '../../../types/types';\nimport AddPostReduxForm, { AddPostFormValuesType } from './AddPostForm';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\n\nexport type MapPropsType = {\n  posts: Array<PostsType>\n}\nexport type DispatchPropsType = {\n  addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n\n  let postsElements = [...props.posts]\n    .reverse()\n    .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\n\n  let addNewPost = (values: AddPostFormValuesType) => {\n    props.addPost(values.newPostText);\n  }\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My post</h3>\n      <AddPostReduxForm onSubmit={addNewPost} />\n      <div className={s.posts}>\n        {postsElements}\n      </div>\n    </div>\n  )\n}\n\nconst MyPostsMemorized = React.memo(MyPosts)\n\nexport default MyPostsMemorized;","import { connect } from 'react-redux';\nimport { actions } from '../../../redux/profileReducer';\nimport { AppStateType } from '../../../redux/reduxStore';\nimport MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts';\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n      posts: state.profilePage.posts,\n  } \n}\n\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\n  addPost: actions.addPostActionCreator\n})(MyPosts)\n\nexport default MyPostsContainer;","import React, { ChangeEvent, useEffect, useState } from 'react';\n\ntype PropsType = {\n   status: string\n   updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status] )\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  }\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  }\n\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value);\n  }\n\n  return (\n    <div> \n      <b>Status</b>: { !editMode &&\n          <div>\n          <span onDoubleClick={activateEditMode}>{props.status || 'No status'}</span>\n        </div>}\n      { editMode &&\n        <div>\n          <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\n        </div>\n      }\n    </div>\n  )\n}\n\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport  styles  from '../../common/FormsControl/FormsControl.module.css';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { createField, GetStringKeys, Input, Textarea } from '../../common/FormsControl/FormsControl';\nimport { ProfileType } from '../../../types/types';\n\ntype PropsType = {\n  profile: ProfileType\n}\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\n \n    return <form onSubmit={handleSubmit}>\n    <div><button>Save</button></div>\n    {error && <div className={styles.formSummaryError}>{error}</div>}\n    <div>\n      <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", 'fullName', [], Input)}\n    </div>\n    <div>\n      <b>Looking for a job</b>: {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\n    </div>\n      <div>\n        <b>My professional skills</b>: {createField<ProfileTypeKeys>('My professional skills', 'lookingForAJobDescription', [], Textarea)}\n      </div>\n    <div>\n      <b>About me</b>: {createField<ProfileTypeKeys>('About me...', 'aboutMe', [], Textarea)}\n    </div>\n    {<div>\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n        return <div key={key} className={s.contacts}> \n          <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n        </div>\n      })}\n    </div>}\n  </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;","import { AppStateType } from \"./reduxStore\";\n\nexport const selectProfile = (state: AppStateType) => {\n    return state.profilePage.profile;\n}\nexport const selectStatus = (state: AppStateType) => {\n    return state.profilePage.status;\n}\n\n","import React, { ChangeEvent, useState } from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport s from './ProfileInfo.module.css';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport userPhoto from '../../../assets/images/user.png';\nimport ProfileDataForm from './ProfileDataForm';\nimport { ContactsType, ProfileType } from '../../../types/types';\nimport { selectProfile, selectStatus } from '../../../redux/profileSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport { selectAuthorisedUserId } from '../../../redux/authSelectors';\nimport { getStatus, getUserProfile, savePhoto, saveProfile, updateStatus } from '../../../redux/profileReducer';\nimport { useEffect } from 'react';\n\ntype PropsType = {\n  //isOwner: boolean\n}\ntype ParamsType = {\n  userId: undefined | string\n}\n\nconst ProfileInfo: React.FC<PropsType> = () => {\n  const profile = useSelector(selectProfile)\n  const status = useSelector(selectStatus)\n  const authorisedUserId = useSelector(selectAuthorisedUserId)\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n  let { userId } = useParams() as ParamsType\n\nconst isOwner = !userId\n  \n  const refreshProfile = () => {\n    let userUrlId: number | null = Number(userId)\n    if (!userUrlId) {\n      userUrlId = authorisedUserId;\n      if (!userUrlId) {\n        history.push('/login');\n      }\n    }\n\n    if (!userUrlId) {\n      console.error(\"Id should exist on URI params or in state ('authorizedUserId')\")\n    } else {\n      dispatch(getUserProfile(userUrlId));\n      dispatch(getStatus(userUrlId));\n    }\n  }\n\n  useEffect(() => {\n    refreshProfile()\n  }, [userId])\n/*\n  const saveProf = (formData: ProfileType): Promise<any> => {\n    dispatch(saveProfile(formData))\n  }\n\n  */\n  const updateStat = (status: string) => {\n    dispatch(updateStatus(status))\n  }\n\n  let [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <Preloader />\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      dispatch(savePhoto(e.target.files[0]));\n    }\n  }\n\n  const onSubmit = (formData: ProfileType) => {\n    dispatch(saveProfile(formData))\n    setEditMode(false)\n    //.then(() => {setEditMode(false);})\n  }\n\n  return (\n    <div className={s.profileInfo}>\n      <div className={s.descriptionBlock}>\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt='profilePhoto' />\n        {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n        { editMode \n          ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} /> \n          : <ProfileData goToEditMode={() => setEditMode(true)} profile={profile} isOwner={isOwner} />}\n        <ProfileStatusWithHooks status={status} updateStatus={updateStat} />\n      </div>\n    </div>\n  )\n}\n\ntype ProfileDataPropsType = {\n  profile: ProfileType\n  isOwner: boolean \n  goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n  return <div>\n    {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\n    <div>\n      <b>Full name</b>: {profile.fullName}\n    </div>\n    <div>\n      <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n    </div>\n    {profile.lookingForAJob &&\n      <div>\n        <b>My professional skills</b>: {profile.lookingForAJobDescription}\n      </div>\n    }\n    <div>\n      <b>About me</b>: {profile.aboutMe}\n    </div>\n    <div>\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\n      })}\n    </div>\n  </div>\n}\n\ntype ContactsPropsType = {\n  contactTitle: string\n  contactValue: string\n}\n\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n  return <div className={s.contacts}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo;","import React from 'react';\nimport MyPostsContainer from './Myposts/MyPostsContainer';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n\nconst Profile: React.FC = () => {\n  return (\n    <div>\n      <ProfileInfo />\n      <MyPostsContainer />\n    </div>\n  )\n}\n\nexport default Profile;","import React, { Component } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Link, Redirect, Route, Switch, withRouter } from 'react-router-dom';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport { UsersPage } from './components/Users/UsersContainer';\nimport { connect, Provider } from 'react-redux';\nimport { initializeApp } from './redux/appReducer';\nimport { compose } from 'redux';\nimport Preloader from './components/common/Preloader/Preloader';\nimport { withSuspense } from './hoc/withSuspense';\nimport { BrowserRouter } from 'react-router-dom';\nimport store, { AppStateType } from './redux/reduxStore';\nimport { LoginPage } from './components/Login/Login';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport { Header } from './components/Header/Header';\nimport Profile from './components/Profile/Profile';\n\nconst { SubMenu } = Menu;\nconst { Content, Footer, Sider } = Layout;\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ChatPage = React.lazy(() => import('./pages/chat/ChatPage'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedChatPage = withSuspense(ChatPage);\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n  componentDidMount() {\n    this.props.initializeApp();\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />\n    } \n\n    return (\n      <Layout>\n        <Header />\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n        <Sider className=\"site-layout-background\" width={200}>\n          <Menu\n            mode=\"inline\"\n            //defaultSelectedKeys={['1']}\n            //defaultOpenKeys={['sub1']}\n            style={{ height: '100%' }}\n          >\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\n              <Menu.Item key=\"1\"><Link to='/profile'>Profile</Link></Menu.Item>\n              <Menu.Item key=\"2\"><Link to='/dialogs'>Messages</Link></Menu.Item>\n              <Menu.Item key=\"3\">option3</Menu.Item>\n              <Menu.Item key=\"4\">option4</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\n              <Menu.Item key=\"5\"><Link to='/developers'>Developers</Link></Menu.Item>\n              <Menu.Item key=\"6\">option6</Menu.Item>\n              <Menu.Item key=\"7\">option7</Menu.Item>\n              <Menu.Item key=\"8\">option8</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"Chat\">\n              <Menu.Item key=\"9\"><Link to='/chat'>Chat</Link></Menu.Item>\n              <Menu.Item key=\"10\">option6</Menu.Item>\n              <Menu.Item key=\"11\">option7</Menu.Item>\n              <Menu.Item key=\"8\">option8</Menu.Item>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Content style={{ padding: '0 24px', minHeight: 280 }}>\n        <Switch>\n            <Route exact path='/'\n              render={() => <Redirect to={\"/profile\"} />} />\n            <Route path='/dialogs'\n              render={() => <SuspendedDialogs/>} />\n            <Route path='/profile/:userId?'\n              render={() => <Profile />} />\n            <Route path='/developers'\n              render={() => <UsersPage pageTitle={'Samurai'} />} />\n            <Route path='/news' render={() => <News />} />\n            <Route path='/music' render={() => <Music />} />\n            <Route path='/settings' render={() => <Settings />} />\n            <Route path='/login' render={() => <LoginPage />} />\n            <Route path='/chat' render={() => <SuspendedChatPage />} />\n            <Route path='*' render={() => <div>404 NOT FOUND</div>} />\n          </Switch>\n        </Content>\n      </Layout>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>Samurai Social Network</Footer>\n  </Layout>\n      /*\n      <div className='app-wrapper'>\n        <HeaderContainer />\n        <Navbar />\n        <div className='app-wrapper-content'>\n          <Switch>\n            <Route exact path='/'\n              render={() => <Redirect to={\"/profile\"} />} />\n            <Route path='/dialogs'\n              render={() => <SuspendedDialogs/>} />\n            <Route path='/profile/:userId?'\n              render={() => <ProfileContainer />} />\n            <Route path='/users'\n              render={() => <UsersPage pageTitle={'Samurai'} />} />\n            <Route path='/news' render={() => <News />} />\n            <Route path='/music' render={() => <Music />} />\n            <Route path='/settings' render={() => <Settings />} />\n            <Route path='/login' render={() => <LoginPage />} />\n            <Route path='*' render={() => <div>404 NOT FOUND</div>} />\n          </Switch>\n        </div>\n      </div>\n      */\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized,\n})\n\nconst AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp }))(App);\n\nconst SamuraiJSApp: React.FC = () => {\n  return <BrowserRouter>\n    <Provider store={store}>\n      <AppContainer/>\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default SamuraiJSApp;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SamuraiJSApp from './App';\n\nReactDOM.render(<SamuraiJSApp />, document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__1ZwPZ\",\"error\":\"FormsControl_error__2Zkz5\",\"formSummaryError\":\"FormsControl_formSummaryError__1PkX-\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"profileInfo\":\"ProfileInfo_profileInfo__2IJgv\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contacts\":\"ProfileInfo_contacts__3y62P\"};"],"sourceRoot":""}