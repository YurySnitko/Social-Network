{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogsItem","props","path","id","className","s","dialog","src","alt","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","connect","actions","WrappedComponent","restProps"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oBCAnND,EAAOC,QAAU,CAAC,QAAU,2B,kGCIxBC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,S,uCCcRE,EAX0B,SAACC,GACtC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,UACI,qBAAKC,IAAI,gKAAgKC,IAAI,SAC7K,cAAC,IAAD,CAASC,GAAIP,EAAb,SAAoBD,EAAMS,W,kBCFvBC,EANsB,SAACV,GAClC,OACI,qBAAKG,UAAWC,IAAEO,QAAlB,SAA4BX,EAAMW,W,yBCHpCC,EAAcC,YAAiB,IAiBtBC,cAA8B,CAACC,KAAM,wBAArCD,EAbgF,SAACd,GAC5F,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,8BACCC,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,OAE5G,8BACI,0DCsBDC,EAvBsB,SAACrB,GAElC,IAAIJ,EAAQI,EAAMsB,YACdC,EAAkB3B,EAAM4B,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAajB,KAAMiB,EAAEjB,KAAMP,GAAIwB,EAAExB,IAASwB,EAAExB,OACrFyB,EAAmB/B,EAAMgC,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASlB,QAASkB,EAAElB,SAAckB,EAAE3B,OAMnF,OACI,sBAAKC,UAAWC,IAAEoB,QAAlB,UACI,qBAAKrB,UAAWC,IAAE0B,aAAlB,SACKP,IAEL,sBAAKpB,UAAWC,IAAEwB,SAAlB,UACI,8BAAMD,IACN,cAAC,EAAD,CAAgBX,SAXR,SAACe,GACjB/B,EAAMgC,YAAYD,EAAOE,0BCTlBC,sBACXC,aAPkB,SAACvC,GACnB,MAAO,CACH0B,YAAa1B,EAAM0B,eAMF,CACbU,YAAaI,IAAQJ,eLF1B,SAAgCK,GAYnC,OAHqCF,YACjCxC,EAA4B,GADKwC,EARiC,SAACnC,GAAW,IACzEH,EAAwBG,EAAxBH,OAAWyC,EAD6D,YAChDtC,EADgD,YAE7E,OAAKH,EAEE,cAACwC,EAAD,eAAsBC,IAFT,cAAC,IAAD,CAAU9B,GAAG,gBKJ1B0B,CAMbb","file":"static/js/3.cdff4d8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1MOXo\"};","import { AppStateType } from '../redux/reduxStore';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth,\n} as MapPropsType);\n\ntype MapPropsType = {\n    isAuth: boolean\n}\ntype DispatchPropsType = {\n}\n\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<DispatchPropsType & MapPropsType> = (props) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to='/login' />;\n\n        return <WrappedComponent {...restProps as WCP} />\n        }\n\n\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\n        mapStateToPropsForRedirect, {})(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype PropsType = {\n    id: number\n    name: string\n}\n\nconst DialogsItem: React.FC<PropsType> = (props) => {\n    let path = '/dialogs/' + props.id;\n\n    return (\n        <div className={s.dialog}>\n            <img src='https://www.nj.com/resizer/h8MrN0-Nw5dB5FOmMVGMmfVKFJo=/450x0/smart/cloudfront-us-east-1.images.arcpublishing.com/advancelocal/SJGKVE5UNVESVCW7BBOHKQCZVE.jpg' alt='phot' />\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogsItem;","import React from 'react';\nimport s from './Message.module.css';\n\ntype PropsType = {\n    message: string\n}\n\nconst Message: React.FC<PropsType> = (props) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n\nexport default Message;","import React from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { required, maxLengthCreator } from '../../utils/validators/validator';\nimport { createField, Textarea } from '../common/FormsControl/FormsControl';\nimport { NewMessageFormType } from './Dialogs';\n\nconst maxLength50 = maxLengthCreator(50);\n\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormType, string>\ntype PropsType = {}\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n            {createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody', [required, maxLength50], Textarea)}\n            </div>\n            <div>\n                <button>Send Message</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<NewMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm);","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogsItem from './DialogsItem/DialogsItem';\nimport Message from './Message/Message';\nimport AddMessageForm from './AddMessageForm';\nimport { InitialStateType } from '../../redux/dialogsReducer';\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormType = {\n    newMessageBody: string\n} \n\nconst Dialogs: React.FC<PropsType> = (props) => {\n\n    let state = props.dialogsPage;\n    let dialogsElements = state.dialogs.map(d => <DialogsItem name={d.name} id={d.id} key={d.id} />);\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\n\n    let addNewMessage = (values: NewMessageFormType) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageForm onSubmit={addNewMessage} />\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { actions } from '../../redux/dialogsReducer';\nimport { AppStateType } from '../../redux/reduxStore';\nimport Dialogs from './Dialogs';\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(\n        mapStateToProps, {\n            sendMessage: actions.sendMessage\n        }), \n        withAuthRedirect\n)(Dialogs);"],"sourceRoot":""}