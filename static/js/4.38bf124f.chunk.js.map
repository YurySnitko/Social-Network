{"version":3,"sources":["pages/chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","src","photo","width","userName","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"8KAeMA,EAAiB,WAEnB,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAEI,gCACS,UAAXN,GAAsB,0EACnB,qCACI,cAACO,EAAD,IACA,cAACC,EAAD,WAKVD,EAAqB,WACvB,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAoBC,iBAAuB,MAFpB,EAGWC,oBAAS,GAHpB,mBAGtBC,EAHsB,KAGRC,EAHQ,KAoB7B,OANAV,qBAAU,WACa,IAAD,EAAdS,IACJ,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAEtD,CAACR,IAEG,sBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAfnC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UACFL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAC5C,qBAAKC,IAAK1B,QAIZuB,EAAmDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QAClE,OAAO,gCACH,qBAAKK,IAAKL,EAAQM,MAAOtB,MAAO,CAACuB,MAAO,UADrC,IACiD,4BAAIP,EAAQQ,WAChE,uBACCR,EAAQA,QACT,6BAIF1B,EAA2B,WAAO,IAAD,EAELI,mBAAS,IAFJ,mBAE5BsB,EAF4B,KAEnBS,EAFmB,KAG7B7C,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAW/D,OAAO,gCACH,8BACI,0BAAU4C,SAAU,SAACtB,GAAD,OAAOqB,EAAWrB,EAAEE,cAAcqB,QAAQA,MAAOX,MAEzE,8BACI,cAAC,IAAD,CAAQY,SAAqB,UAAX9C,EAAoB+C,QAdnB,WAClBb,IAILpC,EAASkD,YAAYd,IACrBS,EAAW,MAQP,wBAMGM,UA1FY,WACvB,OAAO,8BACH,cAACpD,EAAD","file":"static/js/4.38bf124f.chunk.js","sourcesContent":["import { Button } from 'antd'\nimport React, { useState } from 'react'\nimport { useRef } from 'react'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ChatMessageAPIType } from '../../api/chatApi'\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chatReducer'\nimport { AppStateType } from '../../redux/reduxStore'\n\nconst ChatPage: React.FC = () => {\n    return <div>\n        <Chat />\n    </div>\n}\n\nconst Chat: React.FC = () => {\n\n    const dispatch = useDispatch()\n\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [])\n\n    return <div>\n        {status === 'error' && <div>Some error occured. Please refresh page</div>}\n            <>\n                <Messages />\n                <AddMessageForm />\n            </>\n    </div>\n}\n\nconst Messages: React.FC = () => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\n    \n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 200) {\n            !isAutoScroll && setIsAutoScroll(true)\n        } else {\n            isAutoScroll && setIsAutoScroll(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoScroll) {\n        messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n    }\n    }, [messages])\n\n    return <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\n        {messages.map((m, index) => <Message key={m.id} message={m} />)}\n        <div ref={messagesAnchorRef}></div>\n    </div>\n}\n\nconst Message: React.FC<{message: ChatMessageAPIType}> = React.memo(({message}) => {\n    return <div> \n        <img src={message.photo} style={{width: '30px'}} /> <b>{message.userName}</b> \n        <br/>\n        {message.message}\n        <hr />\n    </div>\n})\n\nconst AddMessageForm: React.FC = () => {\n\n    const [message, setMessage] = useState('')\n    const dispatch = useDispatch()\n\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n\n    return <div>\n        <div>\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message} ></textarea>\n        </div>\n        <div>\n            <Button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</Button>\n        </div>\n        \n    </div>\n}\n\nexport default ChatPage\n"],"sourceRoot":""}